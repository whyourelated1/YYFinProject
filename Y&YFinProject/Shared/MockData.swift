import Foundation

enum MockData {
    static let account = BankAccount(
        id: 1,
        userId: 42,
        name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç",
        balance: Decimal(string: "15000.00")!,
        currency: "RUB",
        createdAt: Date(),
        updatedAt: Date()
    )

    static let categories: [TransactionCategory] = [
        TransactionCategory(id: 1, name: "–ü—Ä–æ–¥—É–∫—Ç—ã", emoji: "üçé", direction: .outcome),
        TransactionCategory(id: 2, name: "–ó–∞—Ä–ø–ª–∞—Ç–∞", emoji: "üíº", direction: .income),
        TransactionCategory(id: 3, name: "–ú–∞–≥–∞–∑–∏–Ω—ã", emoji: "üõçÔ∏è", direction: .outcome),
        TransactionCategory(id: 4, name: "–§—Ä–∏–ª–∞–Ω—Å", emoji: "üíª", direction: .income),
        TransactionCategory(id: 5, name: "–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", emoji: "üçΩÔ∏è", direction: .outcome),
        TransactionCategory(id: 6, name: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", emoji: "üé°", direction: .outcome),

    ]

    static let transactions: [Transaction] = [
        //—Ä–∞—Å—Ö–æ–¥—ã: –ø—Ä–æ–¥—É–∫—Ç—ã
        Transaction(
            id: 1,
            accountId: account.id,
            categoryId: categories[0].id,
            amount: Decimal(string: "1200.00")!,
            comment: "–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç",
            transactionDate: Date().addingTimeInterval(-3600 * 1),
            createdAt: Date(),
            updatedAt: Date(),
            hidden: false,
            account: account,
            category: categories[0]
        ),
        //–¥–æ—Ö–æ–¥: –∑–∞—Ä–ø–ª–∞—Ç–∞
        Transaction(
            id: 2,
            accountId: account.id,
            categoryId: categories[1].id,
            amount: Decimal(string: "50000.00")!,
            comment: "–ò—é–Ω—å—Å–∫–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞",
            transactionDate: Date().addingTimeInterval(-3600 * 3),
            createdAt: Date(),
            updatedAt: Date(),
            hidden: false,
            account: account,
            category: categories[1]
        ),
        //—Ä–∞—Å—Ö–æ–¥—ã: —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
        Transaction(
            id: 3,
            accountId: account.id,
            categoryId: categories[5].id,
            amount: Decimal(string: "800.00")!,
            comment: "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä",
            transactionDate: Date().addingTimeInterval(-3600 * 5),
            createdAt: Date(),
            updatedAt: Date(),
            hidden: false,
            account: account,
            category: categories[5]
        ),
        //–¥–æ—Ö–æ–¥: —Ñ—Ä–∏–ª–∞–Ω—Å
        Transaction(
            id: 4,
            accountId: account.id,
            categoryId: categories[3].id,
            amount: Decimal(string: "7500.00")!,
            comment: "–î–∏–∑–∞–π–Ω",
            transactionDate: Date().addingTimeInterval(-3600 * 7),
            createdAt: Date(),
            updatedAt: Date(),
            hidden: false,
            account: account,
            category: categories[3]
        ),
        //—Ä–∞—Å—Ö–æ–¥—ã: –∫–∞—Ñ–µ
        Transaction(
            id: 5,
            accountId: account.id,
            categoryId: categories[4].id,
            amount: Decimal(string: "450.00")!,
            comment: "–ö–æ—Ñ–µ –∏ –¥–µ—Å–µ—Ä—Ç",
            transactionDate: Date().addingTimeInterval(-3600 * 9),
            createdAt: Date(),
            updatedAt: Date(),
            hidden: false,
            account: account,
            category: categories[4]
        ),
        //—Ä–∞—Å—Ö–æ–¥—ã: —à–æ–ø–∏–Ω–≥
        Transaction(
            id: 6,
            accountId: account.id,
            categoryId: categories[2].id,
            amount: Decimal(string: "2300.00")!,
            comment: "–ù–æ–≤–∞—è –æ–±—É–≤—å",
            transactionDate: Date().addingTimeInterval(-3600 * 12),
            createdAt: Date(),
            updatedAt: Date(),
            hidden: false,
            account: account,
            category: categories[2]
        )
    ]
}

